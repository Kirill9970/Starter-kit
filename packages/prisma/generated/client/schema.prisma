generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKeys {
  id                  String   @id(map: "PK_6afa488da2335c53025b9afde86") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  encryptedKey        String   @unique(map: "UQ_f5f024f31d582d2ded166931394") @map("encrypted_key") @db.VarChar
  userId              String?  @map("user_id") @db.VarChar(255)
  type                String   @db.VarChar
  encryptedAllowedIps String[] @map("encrypted_allowed_ips")
  permissions         String[]
  isActive            Boolean  @default(true) @map("is_active")
  expiredAt           DateTime @map("expired_at") @db.Timestamp(6)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
}

model Permissions {
  id                   String                 @id(map: "PK_e83fa8a46bd5a3bfaa095d40812") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  method               String                 @db.VarChar
  alias                String?                @db.VarChar
  messagePattern       String                 @db.VarChar
  isPublic             Boolean?
  description          String?
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)
  RolePermissions      RolePermissions[]
  TwoFactorPermissions TwoFactorPermissions[]
  UserRolePermissions  UserRolePermissions[]

  @@unique([messagePattern, method], map: "UQ_99284019ac548fc181784da1076")
}

model RolePermissions {
  rolesId       String      @db.Uuid
  permissionsId String      @db.Uuid
  Permissions   Permissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade, map: "FK_389946e79d17dcaab69de5c816f")
  Roles         Roles       @relation(fields: [rolesId], references: [id], onDelete: Cascade, map: "FK_d48be34edf463d071885be60856")

  @@id([rolesId, permissionsId], map: "PK_133a8c69e9c3e4ad407656c4c26")
  @@index([permissionsId], map: "IDX_389946e79d17dcaab69de5c816")
  @@index([rolesId], map: "IDX_d48be34edf463d071885be6085")
}

model Roles {
  id              String            @id(map: "PK_efba48c6a0c7a9b6260f771b165") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique(map: "UQ_8eadedb8470c92966389ecc2165") @db.VarChar
  description     String?           @db.VarChar
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  RolePermissions RolePermissions[]
  UserRoles       UserRoles[]
}

model Session {
  id          String              @id(map: "PK_b2d57e0f3ce66780706d739e274") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String              @map("user_id") @db.VarChar(255)
  userAgent   String?             @map("user_agent") @db.VarChar(255)
  role        String?             @db.VarChar(64)
  userIp      String?             @map("user_ip") @db.VarChar(255)
  fingerprint String?             @db.VarChar(255)
  country     String?             @db.VarChar(255)
  city        String?             @db.VarChar(255)
  status      Session_status_enum @default(active)
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @default(now()) @map("updated_at") @db.Timestamptz(6)
}

model TwoFactorPermissions {
  id                   String           @id(map: "PK_562899fdc235e083b0cee4487cb") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId               String           @map("user_id") @db.Uuid
  permissionId         String           @map("permission_id") @db.Uuid
  confirmationMethodId String           @map("confirmation_method_id") @db.Uuid
  User                 User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d1f4fb8a5fbb30ab845a0437bab")
  Permissions          Permissions      @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d329dcc7dfb4e55264d1ad57704")
  UserLoginMethods     UserLoginMethods @relation(fields: [confirmationMethodId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d6989093bfc552befa337292fa4")

  @@unique([userId, permissionId, confirmationMethodId], map: "UQ_4c6ed716f5c3411fcd4302f0935")
}

model User {
  id                   String                 @id(map: "PK_9862f679340fb2388436a5ab3e4") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fullName             String?                @map("full_name") @db.VarChar(255)
  username             String?                @db.VarChar(255)
  password             String?                @db.VarChar(255)
  referralCode         Decimal?               @unique(map: "UQ_f0ad4ffc0acd65271f499481e85") @map("referral_code") @db.Decimal
  status               User_status_enum       @default(inactive)
  type                 User_type_enum         @default(user)
  extra_data           Json                   @default("{}")
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime?              @map("deleted_at") @db.Timestamptz(6)
  TwoFactorPermissions TwoFactorPermissions[]
  UserLoginMethods     UserLoginMethods[]
  UserRoles            UserRoles[]

  @@index([type, status], map: "IDX_28dda88f41896d7a2f465b393d")
  @@index([username], map: "IDX_29a05908a0fa0728526d283365")
  @@index([type], map: "IDX_50ff77e042ad2b0e27229cad22")
}

model UserLoginMethods {
  id                   String                       @id(map: "PK_8cd2a4ff9ace24f85f0fbfaf7c3") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId               String                       @map("user_id") @db.Uuid
  method               UserLoginMethods_method_enum
  login                String?                      @unique(map: "IDX_8ad17508a891c352667f5c882a") @db.VarChar(255)
  token                String?                      @db.VarChar(255)
  isPrimary            Boolean                      @default(true) @map("is_primary")
  code                 Decimal?                     @db.Decimal
  codeLifetime         DateTime?                    @map("code_lifetime") @db.Timestamptz(6)
  createdAt            DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime                     @default(now()) @map("updated_at") @db.Timestamptz(6)
  TwoFactorPermissions TwoFactorPermissions[]
  User                 User                         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_9fb3d91ec3b2c9f2d5bd1895e3e")
}

model UserRolePermissions {
  userRolesId   String      @db.Uuid
  permissionsId String      @db.Uuid
  UserRoles     UserRoles   @relation(fields: [userRolesId], references: [id], onDelete: Cascade, map: "FK_0f49bd6410ccd8d373a539e7707")
  Permissions   Permissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade, map: "FK_9c0679bdc20d714d713701f67fe")

  @@id([userRolesId, permissionsId], map: "PK_31d9c5971b157f997a0a1efeb11")
  @@index([userRolesId], map: "IDX_0f49bd6410ccd8d373a539e770")
  @@index([permissionsId], map: "IDX_9c0679bdc20d714d713701f67f")
}

model UserRoles {
  id                  String                @id(map: "PK_a44a2382829972daa2a31345f56") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId              String?               @map("user_id") @db.Uuid
  roleId              String?               @map("role_id") @db.Uuid
  UserRolePermissions UserRolePermissions[]
  Roles               Roles?                @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_5f1d6fdea1024424fd60b193b9f")
  User                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a6b832f61ba4bd959c838a1953b")

  @@index([userId], map: "IDX_a6b832f61ba4bd959c838a1953")
}

enum Session_status_enum {
  active
  terminated
  inactive
}

enum UserLoginMethods_method_enum {
  email
  phone
  telegram
  google
  twitter
}

enum User_status_enum {
  active
  inactive
  deleted
  blocked
  suspicious
}

enum User_type_enum {
  admin
  user
  partner
}
